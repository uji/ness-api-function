// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package usr is a generated GoMock package.
package usr

import (
	context "context"
	auth "firebase.google.com/go/auth"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockFireBaseAuthClient is a mock of FireBaseAuthClient interface
type MockFireBaseAuthClient struct {
	ctrl     *gomock.Controller
	recorder *MockFireBaseAuthClientMockRecorder
}

// MockFireBaseAuthClientMockRecorder is the mock recorder for MockFireBaseAuthClient
type MockFireBaseAuthClientMockRecorder struct {
	mock *MockFireBaseAuthClient
}

// NewMockFireBaseAuthClient creates a new mock instance
func NewMockFireBaseAuthClient(ctrl *gomock.Controller) *MockFireBaseAuthClient {
	mock := &MockFireBaseAuthClient{ctrl: ctrl}
	mock.recorder = &MockFireBaseAuthClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFireBaseAuthClient) EXPECT() *MockFireBaseAuthClientMockRecorder {
	return m.recorder
}

// GetUser mocks base method
func (m *MockFireBaseAuthClient) GetUser(ctx context.Context, uid string) (*auth.UserRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, uid)
	ret0, _ := ret[0].(*auth.UserRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser
func (mr *MockFireBaseAuthClientMockRecorder) GetUser(ctx, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockFireBaseAuthClient)(nil).GetUser), ctx, uid)
}

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// create mocks base method
func (m *MockRepository) create(arg0 context.Context, arg1 *User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// create indicates an expected call of create
func (mr *MockRepositoryMockRecorder) create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "create", reflect.TypeOf((*MockRepository)(nil).create), arg0, arg1)
}

// find mocks base method
func (m *MockRepository) find(arg0 context.Context, arg1 UserID) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "find", arg0, arg1)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// find indicates an expected call of find
func (mr *MockRepositoryMockRecorder) find(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "find", reflect.TypeOf((*MockRepository)(nil).find), arg0, arg1)
}
