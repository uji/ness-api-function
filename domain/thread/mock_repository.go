// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package thread is a generated GoMock package.
package thread

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockdynamoDB is a mock of dynamoDB interface
type MockdynamoDB struct {
	ctrl     *gomock.Controller
	recorder *MockdynamoDBMockRecorder
}

// MockdynamoDBMockRecorder is the mock recorder for MockdynamoDB
type MockdynamoDBMockRecorder struct {
	mock *MockdynamoDB
}

// NewMockdynamoDB creates a new mock instance
func NewMockdynamoDB(ctrl *gomock.Controller) *MockdynamoDB {
	mock := &MockdynamoDB{ctrl: ctrl}
	mock.recorder = &MockdynamoDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockdynamoDB) EXPECT() *MockdynamoDBMockRecorder {
	return m.recorder
}

// GetThreadsByIDs mocks base method
func (m *MockdynamoDB) GetThreadsByIDs(ctx context.Context, ids []string) (map[string]DynamoDBThreadRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetThreadsByIDs", ctx, ids)
	ret0, _ := ret[0].(map[string]DynamoDBThreadRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetThreadsByIDs indicates an expected call of GetThreadsByIDs
func (mr *MockdynamoDBMockRecorder) GetThreadsByIDs(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThreadsByIDs", reflect.TypeOf((*MockdynamoDB)(nil).GetThreadsByIDs), ctx, ids)
}

// Find mocks base method
func (m *MockdynamoDB) Find(ctx context.Context, id string) (DynamoDBThreadRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, id)
	ret0, _ := ret[0].(DynamoDBThreadRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockdynamoDBMockRecorder) Find(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockdynamoDB)(nil).Find), ctx, id)
}

// Create mocks base method
func (m *MockdynamoDB) Create(ctx context.Context, thread Thread) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, thread)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockdynamoDBMockRecorder) Create(ctx, thread interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockdynamoDB)(nil).Create), ctx, thread)
}

// Update mocks base method
func (m *MockdynamoDB) Update(ctx context.Context, thread Thread) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, thread)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockdynamoDBMockRecorder) Update(ctx, thread interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockdynamoDB)(nil).Update), ctx, thread)
}

// Mockelasticsearch is a mock of elasticsearch interface
type Mockelasticsearch struct {
	ctrl     *gomock.Controller
	recorder *MockelasticsearchMockRecorder
}

// MockelasticsearchMockRecorder is the mock recorder for Mockelasticsearch
type MockelasticsearchMockRecorder struct {
	mock *Mockelasticsearch
}

// NewMockelasticsearch creates a new mock instance
func NewMockelasticsearch(ctrl *gomock.Controller) *Mockelasticsearch {
	mock := &Mockelasticsearch{ctrl: ctrl}
	mock.recorder = &MockelasticsearchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockelasticsearch) EXPECT() *MockelasticsearchMockRecorder {
	return m.recorder
}

// SearchThreadIDs mocks base method
func (m *Mockelasticsearch) SearchThreadIDs(arg0 context.Context, arg1 SearchThreadIDsRequest, arg2 ...SearchThreadIDsOption) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchThreadIDs", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchThreadIDs indicates an expected call of SearchThreadIDs
func (mr *MockelasticsearchMockRecorder) SearchThreadIDs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchThreadIDs", reflect.TypeOf((*Mockelasticsearch)(nil).SearchThreadIDs), varargs...)
}

// PutThread mocks base method
func (m *Mockelasticsearch) PutThread(arg0 context.Context, arg1 Thread) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutThread", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutThread indicates an expected call of PutThread
func (mr *MockelasticsearchMockRecorder) PutThread(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutThread", reflect.TypeOf((*Mockelasticsearch)(nil).PutThread), arg0, arg1)
}
