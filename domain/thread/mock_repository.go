// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package thread is a generated GoMock package.
package thread

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockElasticSearch is a mock of ElasticSearch interface
type MockElasticSearch struct {
	ctrl     *gomock.Controller
	recorder *MockElasticSearchMockRecorder
}

// MockElasticSearchMockRecorder is the mock recorder for MockElasticSearch
type MockElasticSearchMockRecorder struct {
	mock *MockElasticSearch
}

// NewMockElasticSearch creates a new mock instance
func NewMockElasticSearch(ctrl *gomock.Controller) *MockElasticSearch {
	mock := &MockElasticSearch{ctrl: ctrl}
	mock.recorder = &MockElasticSearchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockElasticSearch) EXPECT() *MockElasticSearchMockRecorder {
	return m.recorder
}

// FindThread mocks base method
func (m *MockElasticSearch) FindThread(ctx context.Context, id string) (ElasticSearchThreadRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindThread", ctx, id)
	ret0, _ := ret[0].(ElasticSearchThreadRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindThread indicates an expected call of FindThread
func (mr *MockElasticSearchMockRecorder) FindThread(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindThread", reflect.TypeOf((*MockElasticSearch)(nil).FindThread), ctx, id)
}

// SearchThreads mocks base method
func (m *MockElasticSearch) SearchThreads(arg0 context.Context, arg1 SearchThreadIDsRequest, arg2 ...SearchThreadIDsOption) ([]ElasticSearchThreadRow, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchThreads", varargs...)
	ret0, _ := ret[0].([]ElasticSearchThreadRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchThreads indicates an expected call of SearchThreads
func (mr *MockElasticSearchMockRecorder) SearchThreads(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchThreads", reflect.TypeOf((*MockElasticSearch)(nil).SearchThreads), varargs...)
}

// PutThread mocks base method
func (m *MockElasticSearch) PutThread(arg0 context.Context, arg1 Thread) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutThread", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutThread indicates an expected call of PutThread
func (mr *MockElasticSearchMockRecorder) PutThread(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutThread", reflect.TypeOf((*MockElasticSearch)(nil).PutThread), arg0, arg1)
}
