// Code generated by MockGen. DO NOT EDIT.
// Source: thread.go

// Package thread is a generated GoMock package.
package thread

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockThread is a mock of Thread interface
type MockThread struct {
	ctrl     *gomock.Controller
	recorder *MockThreadMockRecorder
}

// MockThreadMockRecorder is the mock recorder for MockThread
type MockThreadMockRecorder struct {
	mock *MockThread
}

// NewMockThread creates a new mock instance
func NewMockThread(ctrl *gomock.Controller) *MockThread {
	mock := &MockThread{ctrl: ctrl}
	mock.recorder = &MockThreadMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockThread) EXPECT() *MockThreadMockRecorder {
	return m.recorder
}

// ID mocks base method
func (m *MockThread) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockThreadMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockThread)(nil).ID))
}

// TeamID mocks base method
func (m *MockThread) TeamID() TeamID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TeamID")
	ret0, _ := ret[0].(TeamID)
	return ret0
}

// TeamID indicates an expected call of TeamID
func (mr *MockThreadMockRecorder) TeamID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TeamID", reflect.TypeOf((*MockThread)(nil).TeamID))
}

// CreatorID mocks base method
func (m *MockThread) CreatorID() UserID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatorID")
	ret0, _ := ret[0].(UserID)
	return ret0
}

// CreatorID indicates an expected call of CreatorID
func (mr *MockThreadMockRecorder) CreatorID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatorID", reflect.TypeOf((*MockThread)(nil).CreatorID))
}

// Title mocks base method
func (m *MockThread) Title() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Title")
	ret0, _ := ret[0].(string)
	return ret0
}

// Title indicates an expected call of Title
func (mr *MockThreadMockRecorder) Title() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Title", reflect.TypeOf((*MockThread)(nil).Title))
}

// Closed mocks base method
func (m *MockThread) Closed() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Closed")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Closed indicates an expected call of Closed
func (mr *MockThreadMockRecorder) Closed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Closed", reflect.TypeOf((*MockThread)(nil).Closed))
}

// CreatedAt mocks base method
func (m *MockThread) CreatedAt() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatedAt")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// CreatedAt indicates an expected call of CreatedAt
func (mr *MockThreadMockRecorder) CreatedAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatedAt", reflect.TypeOf((*MockThread)(nil).CreatedAt))
}

// UpdatedAt mocks base method
func (m *MockThread) UpdatedAt() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatedAt")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// UpdatedAt indicates an expected call of UpdatedAt
func (mr *MockThreadMockRecorder) UpdatedAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatedAt", reflect.TypeOf((*MockThread)(nil).UpdatedAt))
}

// Open mocks base method
func (m *MockThread) Open() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Open")
}

// Open indicates an expected call of Open
func (mr *MockThreadMockRecorder) Open() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockThread)(nil).Open))
}

// Close mocks base method
func (m *MockThread) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockThreadMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockThread)(nil).Close))
}
