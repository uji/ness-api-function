// Package xogen contains the types for schema 'public'.
package xogen

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"

	"github.com/google/uuid"
)

// Thread represents a row from 'public.threads'.
type Thread struct {
	UUID      uuid.UUID `json:"uuid"`       // uuid
	Title     string    `json:"title"`      // title
	Closed    bool      `json:"closed"`     // closed
	CreatedAt time.Time `json:"created_at"` // created_at
	UpdatedAt time.Time `json:"updated_at"` // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Thread exists in the database.
func (t *Thread) Exists() bool {
	return t._exists
}

// Deleted provides information if the Thread has been deleted from the database.
func (t *Thread) Deleted() bool {
	return t._deleted
}

// Insert inserts the Thread to the database.
func (t *Thread) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if t._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO public.threads (` +
		`uuid, title, closed, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)`

	// run query
	XOLog(sqlstr, t.UUID, t.Title, t.Closed, t.CreatedAt, t.UpdatedAt)
	err = db.QueryRow(sqlstr, t.UUID, t.Title, t.Closed, t.CreatedAt, t.UpdatedAt).Scan(&t.UUID)
	if err != nil {
		return err
	}

	// set existence
	t._exists = true

	return nil
}

// Update updates the Thread in the database.
func (t *Thread) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !t._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if t._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.threads SET (` +
		`title, closed, created_at, updated_at` +
		`) = ( ` +
		`$1, $2, $3, $4` +
		`) WHERE uuid = $5`

	// run query
	XOLog(sqlstr, t.Title, t.Closed, t.CreatedAt, t.UpdatedAt, t.UUID)
	_, err = db.Exec(sqlstr, t.Title, t.Closed, t.CreatedAt, t.UpdatedAt, t.UUID)
	return err
}

// Save saves the Thread to the database.
func (t *Thread) Save(db XODB) error {
	if t.Exists() {
		return t.Update(db)
	}

	return t.Insert(db)
}

// Upsert performs an upsert for Thread.
//
// NOTE: PostgreSQL 9.5+ only
func (t *Thread) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if t._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.threads (` +
		`uuid, title, closed, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) ON CONFLICT (uuid) DO UPDATE SET (` +
		`uuid, title, closed, created_at, updated_at` +
		`) = (` +
		`EXCLUDED.uuid, EXCLUDED.title, EXCLUDED.closed, EXCLUDED.created_at, EXCLUDED.updated_at` +
		`)`

	// run query
	XOLog(sqlstr, t.UUID, t.Title, t.Closed, t.CreatedAt, t.UpdatedAt)
	_, err = db.Exec(sqlstr, t.UUID, t.Title, t.Closed, t.CreatedAt, t.UpdatedAt)
	if err != nil {
		return err
	}

	// set existence
	t._exists = true

	return nil
}

// Delete deletes the Thread from the database.
func (t *Thread) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !t._exists {
		return nil
	}

	// if deleted, bail
	if t._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.threads WHERE uuid = $1`

	// run query
	XOLog(sqlstr, t.UUID)
	_, err = db.Exec(sqlstr, t.UUID)
	if err != nil {
		return err
	}

	// set deleted
	t._deleted = true

	return nil
}

// ThreadByUUID retrieves a row from 'public.threads' as a Thread.
//
// Generated from index 'thread_pkey'.
func ThreadByUUID(db XODB, uuid uuid.UUID) (*Thread, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`uuid, title, closed, created_at, updated_at ` +
		`FROM public.threads ` +
		`WHERE uuid = $1`

	// run query
	XOLog(sqlstr, uuid)
	t := Thread{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, uuid).Scan(&t.UUID, &t.Title, &t.Closed, &t.CreatedAt, &t.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &t, nil
}
